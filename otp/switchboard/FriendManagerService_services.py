################################################## 
# FriendManagerService_services.py 
# generated by ZSI.generate.wsdl2python
##################################################


from .FriendManagerService_services_types import *
import urllib.parse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
import ZSI

# Locator
class FriendManagerServiceLocator:
    FriendManager_address = "http://dnhspapp02/disl/services-admin/FriendManager"
    def getFriendManagerAddress(self):
        return FriendManagerServiceLocator.FriendManager_address
    def getFriendManager(self, url=None, **kw):
        return FriendManagerSoapBindingSOAP(url or FriendManagerServiceLocator.FriendManager_address, **kw)

# Methods
class FriendManagerSoapBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: <ZSI.wstools.WSDLTools.Message instance at 0x00F1CD00>
    def generateToken(self, user_id):

        request = generateTokenRequest()
        request._user_id = user_id

        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(generateTokenResponse.typecode)
        if isinstance(response, generateTokenResponse.typecode.pyclass) is False:
            raise TypeError("%s incorrect response type" % (response.__class__))
        generateTokenReturn = response._generateTokenReturn
        return generateTokenReturn

    # op: <ZSI.wstools.WSDLTools.Message instance at 0x00F13A58>
    def generateTokenParentAuth(self, user_id,username,password,affiliate,browserAgent,ip_address):

        request = generateTokenParentAuthRequest()
        request._user_id = user_id
        request._username = username
        request._password = password
        request._affiliate = affiliate
        request._browserAgent = browserAgent
        request._ip_address = ip_address

        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(generateTokenParentAuthResponse.typecode)
        if isinstance(response, generateTokenParentAuthResponse.typecode.pyclass) is False:
            raise TypeError("%s incorrect response type" % (response.__class__))
        generateTokenParentAuthReturn = response._generateTokenParentAuthReturn
        return generateTokenParentAuthReturn

    # op: <ZSI.wstools.WSDLTools.Message instance at 0x00F1CF80>
    def redeemToken(self, user_id,token):

        request = redeemTokenRequest()
        request._user_id = user_id
        request._token = token

        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(redeemTokenResponse.typecode)
        if isinstance(response, redeemTokenResponse.typecode.pyclass) is False:
            raise TypeError("%s incorrect response type" % (response.__class__))
        redeemTokenReturn = response._redeemTokenReturn
        return redeemTokenReturn

    # op: <ZSI.wstools.WSDLTools.Message instance at 0x00F0A2B0>
    def redeemTokenParentAuth(self, user_id,token,username,password,affiliate,browserAgent,ip_address):

        request = redeemTokenParentAuthRequest()
        request._user_id = user_id
        request._token = token
        request._username = username
        request._password = password
        request._affiliate = affiliate
        request._browserAgent = browserAgent
        request._ip_address = ip_address

        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(redeemTokenParentAuthResponse.typecode)
        if isinstance(response, redeemTokenParentAuthResponse.typecode.pyclass) is False:
            raise TypeError("%s incorrect response type" % (response.__class__))
        redeemTokenParentAuthReturn = response._redeemTokenParentAuthReturn
        return redeemTokenParentAuthReturn

    # op: <ZSI.wstools.WSDLTools.Message instance at 0x00F1CBC0>
    def makeCasualFriends(self, user_id1,user_id2):

        request = makeCasualFriendsRequest()
        request._user_id1 = user_id1
        request._user_id2 = user_id2

        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(makeCasualFriendsResponse.typecode)
        if isinstance(response, makeCasualFriendsResponse.typecode.pyclass) is False:
            raise TypeError("%s incorrect response type" % (response.__class__))
        return 

    # op: <ZSI.wstools.WSDLTools.Message instance at 0x00F0A5A8>
    def makeFriends(self, user_id1,user_id2,is_secret):

        request = makeFriendsRequest()
        request._user_id1 = user_id1
        request._user_id2 = user_id2
        request._is_secret = is_secret

        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(makeFriendsResponse.typecode)
        if isinstance(response, makeFriendsResponse.typecode.pyclass) is False:
            raise TypeError("%s incorrect response type" % (response.__class__))
        return 

    # op: <ZSI.wstools.WSDLTools.Message instance at 0x00F1C940>
    def getFriends(self, user_id):

        request = getFriendsRequest()
        request._user_id = user_id

        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getFriendsResponse.typecode)
        if isinstance(response, getFriendsResponse.typecode.pyclass) is False:
            raise TypeError("%s incorrect response type" % (response.__class__))
        getFriendsReturn = response._getFriendsReturn
        return getFriendsReturn

    # op: <ZSI.wstools.WSDLTools.Message instance at 0x00F0A558>
    def getNamedFriends(self, user_id):

        request = getNamedFriendsRequest()
        request._user_id = user_id

        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getNamedFriendsResponse.typecode)
        if isinstance(response, getNamedFriendsResponse.typecode.pyclass) is False:
            raise TypeError("%s incorrect response type" % (response.__class__))
        getNamedFriendsReturn = response._getNamedFriendsReturn
        return getNamedFriendsReturn

    # op: <ZSI.wstools.WSDLTools.Message instance at 0x00F13DF0>
    def getTokens(self, user_id):

        request = getTokensRequest()
        request._user_id = user_id

        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getTokensResponse.typecode)
        if isinstance(response, getTokensResponse.typecode.pyclass) is False:
            raise TypeError("%s incorrect response type" % (response.__class__))
        getTokensReturn = response._getTokensReturn
        return getTokensReturn

    # op: <ZSI.wstools.WSDLTools.Message instance at 0x00F13D00>
    def deleteFriend(self, friend1,friend2):

        request = deleteFriendRequest()
        request._friend1 = friend1
        request._friend2 = friend2

        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(deleteFriendResponse.typecode)
        if isinstance(response, deleteFriendResponse.typecode.pyclass) is False:
            raise TypeError("%s incorrect response type" % (response.__class__))
        return 

    # op: <ZSI.wstools.WSDLTools.Message instance at 0x00F1C0F8>
    def generateRandomToken(self):

        request = generateRandomTokenRequest()

        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(generateRandomTokenResponse.typecode)
        if isinstance(response, generateRandomTokenResponse.typecode.pyclass) is False:
            raise TypeError("%s incorrect response type" % (response.__class__))
        generateRandomTokenReturn = response._generateRandomTokenReturn
        return generateRandomTokenReturn

generateTokenRequest = ns0.generateToken_Dec().pyclass

generateTokenResponse = ns0.generateTokenResponse_Dec().pyclass

generateTokenParentAuthRequest = ns0.generateTokenParentAuth_Dec().pyclass

generateTokenParentAuthResponse = ns0.generateTokenParentAuthResponse_Dec().pyclass

redeemTokenRequest = ns0.redeemToken_Dec().pyclass

redeemTokenResponse = ns0.redeemTokenResponse_Dec().pyclass

redeemTokenParentAuthRequest = ns0.redeemTokenParentAuth_Dec().pyclass

redeemTokenParentAuthResponse = ns0.redeemTokenParentAuthResponse_Dec().pyclass

makeCasualFriendsRequest = ns0.makeCasualFriends_Dec().pyclass

makeCasualFriendsResponse = ns0.makeCasualFriendsResponse_Dec().pyclass

makeFriendsRequest = ns0.makeFriends_Dec().pyclass

makeFriendsResponse = ns0.makeFriendsResponse_Dec().pyclass

getFriendsRequest = ns0.getFriends_Dec().pyclass

getFriendsResponse = ns0.getFriendsResponse_Dec().pyclass

getNamedFriendsRequest = ns0.getNamedFriends_Dec().pyclass

getNamedFriendsResponse = ns0.getNamedFriendsResponse_Dec().pyclass

getTokensRequest = ns0.getTokens_Dec().pyclass

getTokensResponse = ns0.getTokensResponse_Dec().pyclass

deleteFriendRequest = ns0.deleteFriend_Dec().pyclass

deleteFriendResponse = ns0.deleteFriendResponse_Dec().pyclass

generateRandomTokenRequest = ns0.generateRandomToken_Dec().pyclass

generateRandomTokenResponse = ns0.generateRandomTokenResponse_Dec().pyclass
