################################################## 
# FriendManagerService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.TC import ElementDeclaration,TypeDefinition

##############################
# targetNamespace
# http://beans.srv.disl.disney.com
##############################

class ns1:
    targetNamespace = "http://beans.srv.disl.disney.com"

    class Friend_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://beans.srv.disl.disney.com"
        type = (schema, "Friend")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Friend_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"friendId"), aname="_friendId", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"secret"), aname="_secret", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._friendId = None
                    self._secret = None
                    return
            Holder.__name__ = "Friend_Holder"
            self.pyclass = Holder

    class NamedFriend_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://beans.srv.disl.disney.com"
        type = (schema, "NamedFriend")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.NamedFriend_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"displayName"), aname="_displayName", minOccurs=1, maxOccurs=1, nillable=True, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if ns1.Friend_Def not in ns1.NamedFriend_Def.__bases__:
                bases = list(ns1.NamedFriend_Def.__bases__)
                bases.insert(0, ns1.Friend_Def)
                ns1.NamedFriend_Def.__bases__ = tuple(bases)

            ns1.Friend_Def.__init__(self, pname, ofwhat=TClist, extend=True, **kw)

# end class ns1 (tns: http://beans.srv.disl.disney.com)

##############################
# targetNamespace
# http://business.srv.disl.disney.com
##############################

class ns0:
    targetNamespace = "http://business.srv.disl.disney.com"

    class generateToken_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://business.srv.disl.disney.com"
        literal = "generateToken"
        def __init__(self, **kw):
            ns = ns0.generateToken_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"user_id"), aname="_user_id", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://business.srv.disl.disney.com","generateToken")
            kw["aname"] = "_generateToken"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._user_id = None
                    return
            Holder.__name__ = "generateToken_Holder"
            self.pyclass = Holder

    class generateTokenResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://business.srv.disl.disney.com"
        literal = "generateTokenResponse"
        def __init__(self, **kw):
            ns = ns0.generateTokenResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"generateTokenReturn"), aname="_generateTokenReturn", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://business.srv.disl.disney.com","generateTokenResponse")
            kw["aname"] = "_generateTokenResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._generateTokenReturn = None
                    return
            Holder.__name__ = "generateTokenResponse_Holder"
            self.pyclass = Holder

    class generateTokenParentAuth_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://business.srv.disl.disney.com"
        literal = "generateTokenParentAuth"
        def __init__(self, **kw):
            ns = ns0.generateTokenParentAuth_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"user_id"), aname="_user_id", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"affiliate"), aname="_affiliate", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"browserAgent"), aname="_browserAgent", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ip_address"), aname="_ip_address", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://business.srv.disl.disney.com","generateTokenParentAuth")
            kw["aname"] = "_generateTokenParentAuth"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._user_id = None
                    self._username = None
                    self._password = None
                    self._affiliate = None
                    self._browserAgent = None
                    self._ip_address = None
                    return
            Holder.__name__ = "generateTokenParentAuth_Holder"
            self.pyclass = Holder

    class generateTokenParentAuthResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://business.srv.disl.disney.com"
        literal = "generateTokenParentAuthResponse"
        def __init__(self, **kw):
            ns = ns0.generateTokenParentAuthResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"generateTokenParentAuthReturn"), aname="_generateTokenParentAuthReturn", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://business.srv.disl.disney.com","generateTokenParentAuthResponse")
            kw["aname"] = "_generateTokenParentAuthResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._generateTokenParentAuthReturn = None
                    return
            Holder.__name__ = "generateTokenParentAuthResponse_Holder"
            self.pyclass = Holder

    class redeemToken_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://business.srv.disl.disney.com"
        literal = "redeemToken"
        def __init__(self, **kw):
            ns = ns0.redeemToken_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"user_id"), aname="_user_id", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"token"), aname="_token", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://business.srv.disl.disney.com","redeemToken")
            kw["aname"] = "_redeemToken"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._user_id = None
                    self._token = None
                    return
            Holder.__name__ = "redeemToken_Holder"
            self.pyclass = Holder

    class redeemTokenResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://business.srv.disl.disney.com"
        literal = "redeemTokenResponse"
        def __init__(self, **kw):
            ns = ns0.redeemTokenResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"redeemTokenReturn"), aname="_redeemTokenReturn", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://business.srv.disl.disney.com","redeemTokenResponse")
            kw["aname"] = "_redeemTokenResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._redeemTokenReturn = None
                    return
            Holder.__name__ = "redeemTokenResponse_Holder"
            self.pyclass = Holder

    class redeemTokenParentAuth_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://business.srv.disl.disney.com"
        literal = "redeemTokenParentAuth"
        def __init__(self, **kw):
            ns = ns0.redeemTokenParentAuth_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"user_id"), aname="_user_id", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"token"), aname="_token", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"affiliate"), aname="_affiliate", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"browserAgent"), aname="_browserAgent", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ip_address"), aname="_ip_address", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://business.srv.disl.disney.com","redeemTokenParentAuth")
            kw["aname"] = "_redeemTokenParentAuth"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._user_id = None
                    self._token = None
                    self._username = None
                    self._password = None
                    self._affiliate = None
                    self._browserAgent = None
                    self._ip_address = None
                    return
            Holder.__name__ = "redeemTokenParentAuth_Holder"
            self.pyclass = Holder

    class redeemTokenParentAuthResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://business.srv.disl.disney.com"
        literal = "redeemTokenParentAuthResponse"
        def __init__(self, **kw):
            ns = ns0.redeemTokenParentAuthResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"redeemTokenParentAuthReturn"), aname="_redeemTokenParentAuthReturn", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://business.srv.disl.disney.com","redeemTokenParentAuthResponse")
            kw["aname"] = "_redeemTokenParentAuthResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._redeemTokenParentAuthReturn = None
                    return
            Holder.__name__ = "redeemTokenParentAuthResponse_Holder"
            self.pyclass = Holder

    class makeCasualFriends_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://business.srv.disl.disney.com"
        literal = "makeCasualFriends"
        def __init__(self, **kw):
            ns = ns0.makeCasualFriends_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"user_id1"), aname="_user_id1", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"user_id2"), aname="_user_id2", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://business.srv.disl.disney.com","makeCasualFriends")
            kw["aname"] = "_makeCasualFriends"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._user_id1 = None
                    self._user_id2 = None
                    return
            Holder.__name__ = "makeCasualFriends_Holder"
            self.pyclass = Holder

    class makeCasualFriendsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://business.srv.disl.disney.com"
        literal = "makeCasualFriendsResponse"
        def __init__(self, **kw):
            ns = ns0.makeCasualFriendsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://business.srv.disl.disney.com","makeCasualFriendsResponse")
            kw["aname"] = "_makeCasualFriendsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "makeCasualFriendsResponse_Holder"
            self.pyclass = Holder

    class makeFriends_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://business.srv.disl.disney.com"
        literal = "makeFriends"
        def __init__(self, **kw):
            ns = ns0.makeFriends_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"user_id1"), aname="_user_id1", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"user_id2"), aname="_user_id2", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"is_secret"), aname="_is_secret", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://business.srv.disl.disney.com","makeFriends")
            kw["aname"] = "_makeFriends"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._user_id1 = None
                    self._user_id2 = None
                    self._is_secret = None
                    return
            Holder.__name__ = "makeFriends_Holder"
            self.pyclass = Holder

    class makeFriendsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://business.srv.disl.disney.com"
        literal = "makeFriendsResponse"
        def __init__(self, **kw):
            ns = ns0.makeFriendsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://business.srv.disl.disney.com","makeFriendsResponse")
            kw["aname"] = "_makeFriendsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "makeFriendsResponse_Holder"
            self.pyclass = Holder

    class getFriends_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://business.srv.disl.disney.com"
        literal = "getFriends"
        def __init__(self, **kw):
            ns = ns0.getFriends_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"user_id"), aname="_user_id", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://business.srv.disl.disney.com","getFriends")
            kw["aname"] = "_getFriends"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._user_id = None
                    return
            Holder.__name__ = "getFriends_Holder"
            self.pyclass = Holder

    class getFriendsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://business.srv.disl.disney.com"
        literal = "getFriendsResponse"
        def __init__(self, **kw):
            ns = ns0.getFriendsResponse_Dec.schema
            TClist = [ns1.Friend_Def(pname=(ns,"getFriendsReturn"), aname="_getFriendsReturn", minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://business.srv.disl.disney.com","getFriendsResponse")
            kw["aname"] = "_getFriendsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getFriendsReturn = []
                    return
            Holder.__name__ = "getFriendsResponse_Holder"
            self.pyclass = Holder

    class getNamedFriends_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://business.srv.disl.disney.com"
        literal = "getNamedFriends"
        def __init__(self, **kw):
            ns = ns0.getNamedFriends_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"user_id"), aname="_user_id", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://business.srv.disl.disney.com","getNamedFriends")
            kw["aname"] = "_getNamedFriends"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._user_id = None
                    return
            Holder.__name__ = "getNamedFriends_Holder"
            self.pyclass = Holder

    class getNamedFriendsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://business.srv.disl.disney.com"
        literal = "getNamedFriendsResponse"
        def __init__(self, **kw):
            ns = ns0.getNamedFriendsResponse_Dec.schema
            TClist = [ns1.NamedFriend_Def(pname=(ns,"getNamedFriendsReturn"), aname="_getNamedFriendsReturn", minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://business.srv.disl.disney.com","getNamedFriendsResponse")
            kw["aname"] = "_getNamedFriendsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getNamedFriendsReturn = []
                    return
            Holder.__name__ = "getNamedFriendsResponse_Holder"
            self.pyclass = Holder

    class getTokens_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://business.srv.disl.disney.com"
        literal = "getTokens"
        def __init__(self, **kw):
            ns = ns0.getTokens_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"user_id"), aname="_user_id", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://business.srv.disl.disney.com","getTokens")
            kw["aname"] = "_getTokens"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._user_id = None
                    return
            Holder.__name__ = "getTokens_Holder"
            self.pyclass = Holder

    class getTokensResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://business.srv.disl.disney.com"
        literal = "getTokensResponse"
        def __init__(self, **kw):
            ns = ns0.getTokensResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"getTokensReturn"), aname="_getTokensReturn", minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://business.srv.disl.disney.com","getTokensResponse")
            kw["aname"] = "_getTokensResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getTokensReturn = []
                    return
            Holder.__name__ = "getTokensResponse_Holder"
            self.pyclass = Holder

    class deleteFriend_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://business.srv.disl.disney.com"
        literal = "deleteFriend"
        def __init__(self, **kw):
            ns = ns0.deleteFriend_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"friend1"), aname="_friend1", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"friend2"), aname="_friend2", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://business.srv.disl.disney.com","deleteFriend")
            kw["aname"] = "_deleteFriend"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._friend1 = None
                    self._friend2 = None
                    return
            Holder.__name__ = "deleteFriend_Holder"
            self.pyclass = Holder

    class deleteFriendResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://business.srv.disl.disney.com"
        literal = "deleteFriendResponse"
        def __init__(self, **kw):
            ns = ns0.deleteFriendResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://business.srv.disl.disney.com","deleteFriendResponse")
            kw["aname"] = "_deleteFriendResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "deleteFriendResponse_Holder"
            self.pyclass = Holder

    class generateRandomToken_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://business.srv.disl.disney.com"
        literal = "generateRandomToken"
        def __init__(self, **kw):
            ns = ns0.generateRandomToken_Dec.schema
            TClist = []
            kw["pname"] = ("http://business.srv.disl.disney.com","generateRandomToken")
            kw["aname"] = "_generateRandomToken"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "generateRandomToken_Holder"
            self.pyclass = Holder

    class generateRandomTokenResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://business.srv.disl.disney.com"
        literal = "generateRandomTokenResponse"
        def __init__(self, **kw):
            ns = ns0.generateRandomTokenResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"generateRandomTokenReturn"), aname="_generateRandomTokenReturn", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://business.srv.disl.disney.com","generateRandomTokenResponse")
            kw["aname"] = "_generateRandomTokenResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._generateRandomTokenReturn = None
                    return
            Holder.__name__ = "generateRandomTokenResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://business.srv.disl.disney.com)
